version: '3.7'
services:
    traefik:
        image: traefik:v2.8
        command:
            - --log.level=info
            - --api.insecure=true
            - --api.dashboard=true
            - --entrypoints.web.address=:80
            - --entrypoints.websecure.address=:443
            - --providers.docker=true
            - --experimental.hub=true
            - --providers.docker.exposedbydefault=false
            - --providers.file.watch=true
            - --providers.file.directory=/traefik
        ports:
            - 80:80
            - 443:443
            - 8888:8080
        labels:
            - traefik.enable=true
            - traefik.http.routers.traefik.rule=PathPrefix(`/`) || PathPrefix(`/dashboard`)
            - traefik.http.routers.traefik.entrypoints=traefik
            - traefik.http.routers.traefik.service=dashboard@internal
            - traefik.http.routers.traefik.service=api@internal
            - traefik.http.routers.traefik.tls=true
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - traefik:/traefik:ro
            - certs:/certs:ro

    postgres:
        image: postgres:11
        ports:
            - 5432:5432
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
        healthcheck:
            test: pg_isready -U postgres -d postgres
            interval: 5s
            timeout: 3s
            retries: 3
        volumes: 
            - postgres:/var/lib/postgresql/data:rw
            - initdb:/docker-entrypoint-initdb.d

    mongodb:
        image: mongo
        ports:
            - 27017:27017
        healthcheck:
            test: mongosh --eval 'db.stats().ok' --quiet
            interval: 5s
            retries: 3
            start_period: 5s
            timeout: 10s
        volumes:
            - mongo:/data/db:rw

    opa:
        image: openpolicyagent/opa:edge-static
        ports:
            - 8181:8181
        command:
            - run
            - --server
            - --tls-cert-file=/certs/_wildcard.wkspower.local+1.pem
            - --tls-private-key-file=/certs/_wildcard.wkspower.local+1-key.pem
            - /rules/wks_policy_rules.rego
        volumes:
            - opa:/rules:ro
            - certs:/certs:ro

    camunda:
        image: camunda/camunda-bpm-platform:run-7.19.0-SNAPSHOT
        command: ./camunda.sh --rest --webapps --production
        ports:
            - 9443:8443
        environment:
            DB_DRIVER: org.postgresql.Driver
            DB_URL: jdbc:postgresql://postgres:5432/camunda
            DB_USERNAME: postgres
            DB_PASSWORD: postgres
            DB_VALIDATE_ON_BORROW: "false"
        healthcheck:
            test: curl -k --fail https://localhost:8443/engine-rest/version || exit 1
            interval: 10s
            retries: 3
            start_period: 5s
            timeout: 10s
        depends_on:
            postgres:
                condition: service_healthy
        volumes:
            - keystore:/camunda/configuration/keystore:ro

    keycloak:
        image: quay.io/keycloak/keycloak:20.0.3
        command: start -b
        ports:
            - 8082:8080
        labels:
            - traefik.enable=true
            # frontend
            - traefik.http.routers.keycloakfrontend.rule=Host(`login.wkspower.local`)
            - traefik.http.routers.keycloakfrontend.entrypoints=websecure
            - traefik.http.routers.keycloakfrontend.service=keycloakfrontend
            - traefik.http.routers.keycloakfrontend.tls=true
            - traefik.http.services.keycloakfrontend.loadbalancer.server.scheme=http
            - traefik.http.services.keycloakfrontend.loadbalancer.server.port=8080
            # admin
            - traefik.http.routers.keycloakadmin.rule=Host(`iam.wkspower.local`)
            - traefik.http.routers.keycloakadmin.entrypoints=websecure
            - traefik.http.routers.keycloakadmin.service=keycloakadmin
            - traefik.http.routers.keycloakadmin.tls=true
            - traefik.http.services.keycloakadmin.loadbalancer.server.scheme=http
            - traefik.http.services.keycloakadmin.loadbalancer.server.port=8080
        environment:
            KC_LOG_LEVEL: "INFO"
            KC_PROXY: edge
            KC_HOSTNAME: login.wkspower.local
            KC_HOSTNAME_ADMIN: iam.wkspower.local
            KC_HEALTH_ENABLED: "true"
            KC_METRICS_ENABLED: "true"      
            KC_HTTPS_CERTIFICATE_FILE: /certs/_wildcard.wkspower.local+1.pem
            KC_HTTPS_CERTIFICATE_KEY_FILE: /certs/_wildcard.wkspower.local+1-key.pem
            KC_DB: postgres
            KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
            KC_DB_USERNAME: keycloak
            KC_DB_PASSWORD: keycloak00
            DB_VENDOR: POSTGRES
            DB_ADDR: postgres
            DB_DATABASE: keycloak
            DB_USER: keycloak
            DB_SCHEMA: public
            DB_PASSWORD: keycloak00            
            KEYCLOAK_ADMIN: admin
            KEYCLOAK_ADMIN_PASSWORD: admin
        healthcheck:
            test: curl -k --fail https://localhost:8443/health/ready || exit 1
            interval: 10s
            retries: 3
            start_period: 5s
            timeout: 10s
        volumes:
            - certs:/certs
        depends_on:
            postgres:
                condition: service_healthy

    case-engine-rest-api:
        build:
            context: .
            dockerfile: ./case-engine-rest-api/Dockerfile
        ports:
            - 8081:8081
        links:
            - mongodb
            - camunda
            - keycloak
            - opa
        environment:
            - MONGO_DATABASE=shared
            - MONGO_CONN=mongodb://mongodb
            - KEYCLOAK_URL=https://keycloak:8433
            - OPA_URL=https://opa:8181/v1/data/wks/authz/allow
        volumes:
            - cache:/root/.m2
        depends_on:
            mongodb:
                condition: service_healthy
            keycloak:
                condition: service_healthy

    bpm-engine-c7-external-service:
        build:
            context: .
            dockerfile: ./bpm-engine-c7-external-service/Dockerfile
        ports:
            - 8084:8084
        links:
            - mongodb
            - camunda
        environment:
            - CAMUNDA_URL=http://camunda:8080/engine-rest
            - CAMUNDA_USERNAME=demo
            - CAMUNDA_PASSWORD=demo
            - MONGO_DATABASE=shared
            - MONGO_CONN=mongodb://mongodb
        depends_on:
            camunda:
                condition: service_healthy
            mongodb:
                condition: service_healthy

    email-to-case:
        build:
            context: .
            dockerfile: ./email-to-case/Dockerfile
        ports:
            - 8083:8083
        links:
            - mongodb
            - camunda
            - keycloak
            - opa
        environment:
            - MONGO_DATABASE=shared
            - MONGO_CONN=mongodb://mongodb
            - EMAIL_CASE_PATTERN_NEW=new-case
            - EMAIL_CASE_PATTERN_UPDATE=update-case
            - KEYCLOAK_URL=https://keycloak:8433
            - OPA_URL=https://opa:8181/v1/data/wks/authz/allow
        depends_on:
            mongodb:
                condition: service_healthy
            keycloak:
                condition: service_healthy

    case-portal:
        profiles:
            - frontend
        build:
            context: .
            dockerfile: ./case-portal-react/Dockerfile
            args:
                REACT_APP_KEYCLOAK_URL: https://login.wkspower.local
                REACT_APP_API_URL: https://api.wkspower.local
                REACT_APP_EMAIL_URL: https://api.wkspower.local/inbound
        environment:
            NODE_OPTIONS: --max_old_space_size=4096
        ports:
            - 3001:3001
        volumes:
            - cache:/node_modules

volumes:
    postgres:
        driver: local
    mongo:
        driver: local
    traefik:
        driver: local
        driver_opts:
            type: 'none'
            o: 'bind'
            device: '${PWD}/configs/traefik'
    opa:
        driver: local
        driver_opts:
            type: 'none'
            o: 'bind'
            device: '${PWD}/policy-decision-api'
    certs:
        driver: local
        driver_opts:
            type: 'none'
            o: 'bind'
            device: '${PWD}/configs/certs'
    keystore:
        driver: local
        driver_opts:
            type: 'none'
            o: 'bind'
            device: '${PWD}/configs/camunda/keystore'
    initdb:
        driver: local
        driver_opts:
            type: 'none'
            o: 'bind'
            device: '${PWD}/configs/camunda'
    cache:
        driver: local
        driver_opts:
            type: 'none'
            o: 'bind'
            device: '/tmp'